option java_package = "idevgame.meteor.proto";
option java_outer_classname = "MeteorMsgs";

    message MeteorMsg 
    {
        required MsgType cmd = 1;
        enum MsgType
        {
            ProtocolVerify = 10;//协议匹配-客户端版本是否可以在此服务器上联机
			AliveUpdate = 11;//心跳-服务端主动往客户端发，如超过120s未得到应答，视为失效
            GetRoomReq = 100;//拉去房间列表
            GetRoomRsp = 101;//返回房间列表
            CreateRoomReq = 102;//创建房间请求
            CreateRoomRsp = 103;//建立房间其他人必须刷新，不会给其他人发有房间建立的消息.
            JoinRoomReq = 104;//进入房间-未进入房间时，没有必须的信息，无法帧同步
            JoinRoomRsp = 105;//进入房间完成-开始帧同步----
            ChatInRoomReq = 120;//用户在房间内发送信息
            ChatInRoomRsp = 121;//收到某个用户在房间的信息
            EnterLevelReq = 146;//玩家进入关卡
			EnterLevelRsp = 147;
			LeaveLevelReq = 148;//玩家离开关卡
			LeaveLevelRsp = 149;
            AudioChat = 150;//音频包,房间内的.小于10S的
            SyncCommand = 666;//服务器下发操作给KCP客户端
        }

		enum Command
		{
			RandomSeed = 1;//帧同步初始化，下发随机种子之类的
            Key = 2;//按键
            Mouse = 8;//鼠标移动-导致角色旋转
		}
    }

    //SyncRandomSeed
	message SyncInitData
	{
		required uint32 randomSeed = 1;//
	}

	//负责角色的进入和退出(进场和退场).
	message PlayerEvent
	{
		required uint32 playerId = 1;
		required uint32 camp = 2;
        required uint32 model = 3;
        required uint32 weapon = 4;
        required string name = 5;
	}

    //客户端服务器协议验证-防止不兼容的客户端链接
    message ProtocolVerifyReq
    {
        required uint32 version = 1;//协议版本号
    }

    message ProtocolVerifyRsp
    {
        required uint32 result = 1;//成功或失败.
        required string message = 2;//失败或成功原因.
    }

    //房间规则是，不限时间，等最后一个人离开后，关闭
    message RoomInfo
    {
        required uint32 roomId = 1;
        required string roomName = 2;
        required RoomRule rule = 3;
		required RoomPattern pattern = 4;//正常模式/播放录像文件
        required uint32 levelIdx = 5;
		required uint32 hpMax = 6;
        required uint32 password = 7;//0不要密码 1要密码
        required MeteorVersion version = 8;//版本号1=107 2=9.07
        required uint32 Group1 = 9;//阵营1人数
        required uint32 Group2 = 10;//阵营2人数
        required uint32 playerCount = 11;//不区分阵营时人数
        required uint32 maxPlayer = 12;//最大玩家数量
        enum RoomRule
        {
            MZ = 1;//盟主
            ROB = 2;//截镖物
            Defence = 3;//护城
            KillTarget = 4;//暗杀
            Endless = 5;//死斗
            Normal = 6;//单机关卡配置
            Story = 7;//联机进行副本，团队 VS AI
            Moba = 8;//仿MOBA方式
        }

        enum RoomPattern
        {
            _Normal = 1;//普通
            _Replay = 2;//转播
        }

		enum MeteorVersion
		{
			V107 = 1;
			V907 = 2;
		}
    }

    message GetRoomRsp
    {
        repeated RoomInfo Rooms = 1;
    }

    message CreateRoomReq
    {
		required RoomInfo.RoomPattern pattern = 1;//正常模式/录制-结束后可客户端保存/播放录像文件-如联机，则向服务器传递录像数据
        required uint32 maxPlayer = 2;
        required uint32 levelIdx = 3;
        required RoomInfo.RoomRule rule = 4;//规则
        required string roomName = 5;//房间名称.
        required uint32 hpMax = 6;//最大血值.
        required uint32 roundTime = 7;//最大时间
		required RoomInfo.MeteorVersion version = 8;
        optional string secret = 9;//密码
		optional bytes replay_data = 10;//重播数据-即录像数据.
        repeated uint32 models = 11;//允许选择的角色模型
        repeated uint32 weapons = 12;//允许选择的武器模型
    }

    message CreateRoomRsp
    {
        required uint32 result = 1;//1确认成功，其他失败,0服务器无法容纳更多房间请换服务器
        required uint32 roomId = 2;//得到房间id.
        required uint32 levelId = 3;//得到房间使用的关卡信息，这个关卡可能是资料片其中之一.
        required uint32 playerId = 4;//角色id
        required uint32 port = 5;//kcp端口号
    }

    message JoinRoomReq
    {
        required uint32 roomId = 1;
        required RoomInfo.MeteorVersion version = 2;//本地流星版本
		required string nick = 3;
        optional string password = 4;//密码
    }

    message JoinRoomRsp
    {
        required uint32 result = 1;//1成功，其他失败
        required uint32 reason = 2;//失败为原因编号:1人数达到最大数量 2 没找到 3 在其他房间内 4 版本不匹配 5 需要密码 6资源缺少-
        required uint32 levelIdx = 3;//成功返回房间关卡编号
        required uint32 roomId = 4;//哪个房间.
        required uint32 port = 5;//kcp端口号
    }
    
    //鼠标移动消息
    message MouseEvent
    {
        required int32 x = 1;
        required int32 y = 2;
    }

	//按键消息
	message KeyEvent
	{
		required int32 key = 1;//按键编号
		required int32 state = 2;//按键状态
	}

    //帧事件.
    message FrameCommand
    {
		required uint32 LogicFrame = 1;//游戏逻辑帧编号.
		optional uint32 playerId = 2;//指定玩家编号的.
		required MeteorMsg.Command command = 3;//帧指令ID-指明了协议包怎么解开
		optional MouseEvent mouse = 4;//协议包数据-用上一个指令对应的结构反序列化
		optional KeyEvent key = 5;//按键
    }

	//所有玩家的帧序列.
	message GameFrames{
		repeated GameFrame playerCommand = 1;
	}

	//服务器指令.
	message GameFrame
    {
        repeated FrameCommand commands = 1;
    }

    //聊天消息.
    message ChatMsg
    {
        required uint32 playerId = 1;//玩家
        required uint32 channelType = 2;//频道类型 1-大厅 2-战场
        required string chatMessage = 3;//max 256
    }

	//音频包
    message AudioChatMsg
    {
        required uint32 playerId = 1;//玩家
        required uint32 type = 2;//帧类型  1 单帧即为语音消息 2 语音消息开始帧 3 语音消息结束帧
        required bytes audio_data = 3;//音频数据
    }